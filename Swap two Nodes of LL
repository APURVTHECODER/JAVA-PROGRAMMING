public class Solution {

	public static LinkedListNode<Integer> swapNodes(LinkedListNode<Integer> head, int i, int j) {
		//Your code goes here
        int count1=0;
        LinkedListNode<Integer> temp1=head;
         LinkedListNode<Integer>storei=null;
        LinkedListNode<Integer> storej=null;
        while(temp1!=null)
        {
            if(i==0 && j!=1)
            {if(count1==i)
            {
                storei=temp1;
                //System.out.println(storei.data);
            }
            if(count1==j-1)
            {
                storej=temp1;
                //System.out.println(storej.data);
            }
            }
            else if(i==0 && j==1)
            {if(count1==i)
            {
                storei=temp1;
                //System.out.println(storei.data);
            }
            if(count1==j)
            {
                storej=temp1;
                //System.out.println(storej.data);
            }
            }
            else if(j-i==1)
            {if(count1==i-1)
            {
                storei=temp1;
                //System.out.println(storei.data);
            }
            if(count1==j)
            {
                storej=temp1;
                //System.out.println(storej.data);
            }
            }
            else{
            if(count1==i-1)
            {
                storei=temp1;
                //System.out.println(storei.data);
            }
            if(count1==j-1)
            {
                storej=temp1;
                //System.out.println(storej.data);
            }
            }
            count1++;
            temp1=temp1.next;
             //System.out.println(temp1.data);
        }
        if(i==0 && j!=1)
        {
        LinkedListNode<Integer> storeixx=storei.next;    //3->4
        LinkedListNode<Integer> storeixxx=storej.next.next;   //address to 1
        LinkedListNode<Integer> storejxx=storej.next; //2->6
        storej.next=storei;  //2->3
        storei.next=storeixxx; //3->1
        storejxx.next=storeixx; //6->4
    	head=storejxx;   
        }
         else if(i==0 && j==1)
         {
        //LinkedListNode<Integer> headcop=storei;
             //System.out.print(headcop.data);
        //LinkedListNode<Integer> storeixx=storei.next;    
        //LinkedListNode<Integer> storeixxx=storeixx.next;    
        LinkedListNode<Integer> storejxx=storej.next;
            // System.out.print(storejxx.data);
             storej.next=storei; 
            storei.next=storejxx;
            head=storej; // HEAD SHOULD BE UPDATED AS IT HAS CHANGED
         }
        else if(j-i==1)
        {
        LinkedListNode<Integer> storeixx=storei.next;    //5->2
        LinkedListNode<Integer> storeixxx=storeixx.next;    //2->6
        LinkedListNode<Integer> storejxx=storej;           //6
         //LinkedListNode<Integer> storejxxx=storejxx.next;  //6->1
       LinkedListNode<Integer> storeix=storei.next;  //5->2
        //LinkedListNode<Integer> storejx=storej;   //6
    	storeixx.next=storejxx.next;  //2->1; 
       storei.next=storej; //5->6
       storei.next.next=storeix;
        //storeix.next=storejxx.next; // 2->1   
        }
        else
        {
        LinkedListNode<Integer> storeixx=storei.next;     //4->5
        LinkedListNode<Integer> storeixxx=storeixx.next;  //5->2
        LinkedListNode<Integer> storejxx=storej.next;      //6->1
         LinkedListNode<Integer> storejxxx=storejxx.next;  // 1->9
       LinkedListNode<Integer> storeix=storei.next;  //4->5
        LinkedListNode<Integer> storejx=storej.next;   //6->1
        storei.next=storejx;      //4->1
         storej.next=storeixx;          //6- >5
        storeixx.next=storejxxx;     //5->9
        storejxx.next=storeixxx;     //1->2
        }
        
        return head;
	}

}








//   public static LinkedListNode<Integer> findPrevNode(LinkedListNode<Integer> head, int count)
//     {
//         for (int i=0;i<count-1;i++)
//         {
//             head=head.next;
//         }
//         return head;
//     }

// 	public static LinkedListNode<Integer> swapNodes(LinkedListNode<Integer> head, int i, int j) {
// 		//Your code goes here
//         if (head==null)
//         {
//             return head;
//         }
//         else if (j==0 || (i-j==-1))
//         {
//             int temp=i;
//             i=j;
//             j=temp;
//         }
        
//         LinkedListNode<Integer> swap1=null,swap2=null,p1=null,n1=null,p2=null,n2=null;
        
//         if (i==0 && i-j==1)
//         {
//             swap1=head;
//             swap2=head.next;

//             swap1=swap1.next;
//             head=swap2;
//             swap2.next=swap1;
            
//         }
//         else if(i-j==1)
//         {
//             p1=findPrevNode(head,j);
//         	swap1=p1.next;
//             swap2=swap1.next;
//             n2=swap2.next;
//             //System.out.println(p1.data);
//             //System.out.println(swap1.data);
//             //System.out.println(swap2.data);
//             //System.out.println(n2.data);
            
//             p1.next=swap2;
//             swap2.next=swap1;
//             swap1.next=n2;
            
//         }
//         else if (i==0)
//         {
//             swap1=head;
//             n1=swap1.next;
//             p2=findPrevNode(head,j);
//             swap2=p2.next;
//             n2=swap2.next;
            
//             head=swap2;
//             head.next=n1;
//             p2.next=swap1;
//             swap1.next=n2;
            
//         }
//         else
//         {
//         	p1=findPrevNode(head,i);
//         	p2=findPrevNode(head,j);
//         	swap1=p1.next;
//         	swap2=p2.next;
//         	n1=swap1.next;
//         	n2=swap2.next;
        
//         	p1.next=swap2;
//         	p2.next=swap1;
//         	swap1.next=n2;
//         	swap2.next=n1;
//         }
        
        
//         return head;
// 	}
