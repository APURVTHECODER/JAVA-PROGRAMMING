public class Solution {

	public static long staircase(int n) {
        
       //approach 1-simple recursion  
        
//         if(n<0)
//         {
//             return 0;
//         }
//     	if(n==0)
//         {
//             return 1;
//         }
        
//        return staircase(n-1)+staircase(n-2)+staircase(n-3);
         
    
 // ---------------------------------------------------------------------------      
        //approach 2-recursion+memoization
        
// 	long arr[]=new long[n+1];
//         for(int i=0;i<arr.length;i++)
//         {
//             arr[i]=-1;
//         }
//         return countDp(n,arr);
    
// 	}
//     public static long countDp(int n,long map[])
//     {
//         if(n<0)
//         {
//             return 0;
//         }
//     	if(n==0)
//         {
//             return 1;
//         }
//         else if(map[n]>-1)
//         {
//             return map[n];
//         }
//         else
//         {
//             map[n]=countDp(n-1,map)+countDp(n-2,map)+countDp(n-3,map);
//             return map[n];
            
//         }
 
        
//--------------------------------------------------------------
        //approach 3-iterative DP
        
        
        long arr[]=new long[n+1];
      	arr[0]=1;
        arr[1]=1;
        for(int i=2;i<arr.length;i++)
        {
            long op2=0;
            long op3=0;
            long op1=arr[i-1];
            if(i-2>=0)
            {
                op2=arr[i-2];
            }
            if(i-3>=0)
            {
                op3=arr[i-3];
            }
            arr[i]=op1+op2+op3;
        }
        return arr[n];
        
         
    }

}
