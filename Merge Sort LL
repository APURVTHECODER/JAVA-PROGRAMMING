public class Solution {

	public static LinkedListNode<Integer> mergeSort(LinkedListNode<Integer> head) {
		//Your code goes here
        if(head==null || head.next==null)
        {
            return head;
        }
        LinkedListNode<Integer> fast=head;
        LinkedListNode<Integer> slow=head;
        while(fast.next!=null && fast.next.next!=null )
        {
            slow=slow.next;
            fast=fast.next.next;
            
        }
        LinkedListNode<Integer> part2=slow.next;
    	 LinkedListNode<Integer> part1=head;
        slow.next=null;
        // LinkedListNode<Integer> secondhead=part2;
        LinkedListNode<Integer> newpart2=part2;
        LinkedListNode<Integer> newpart1=part1;
        newpart1=mergeSort(part1);
        newpart2=mergeSort(part2);
        LinkedListNode<Integer> fina=mergeTwoSortedLinkedLists(newpart1,newpart2);
        return fina;
        
        //part 1 k anadar first half h list ka
        //part 2 anadar second half h list ka

	}
	public static LinkedListNode<Integer> mergeTwoSortedLinkedLists(LinkedListNode<Integer> head1, LinkedListNode<Integer> head2) {
        //Your code goes here
        
        	if(head1==null)
			{
    			return head2;
			}
			if(head2==null)
			{
    			return head1;
            }
 		LinkedListNode<Integer> temp1=head1;
        LinkedListNode<Integer> temp2=head2;
        LinkedListNode<Integer> tail=null;
        LinkedListNode<Integer> head=null;
         if(temp1.data<temp2.data)
            {
               tail=temp1;
                head=temp1;
                temp1=temp1.next;
            }
            
            else
            {
                tail=temp2;
                head=temp2;
                temp2=temp2.next;
            }
            
        
        while(temp1!=null && temp2!=null)
        {
            
            if(temp1.data<=temp2.data)
            {
               tail.next=temp1;
                tail=temp1;
                temp1=temp1.next;
            }
            
            else
            {
                tail.next=temp2;
                tail=temp2;
                temp2=temp2.next;
            }
            
        }
        

            if(temp1!=null)
             {

                    tail.next=temp1;
                

            }
            else
             {
                tail.next=temp2;
                
             }
         return head;

    }
}
