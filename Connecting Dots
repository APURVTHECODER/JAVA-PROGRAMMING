public class Solution {
	
	 boolean findCycle(char[][] graph, int i, int j, boolean[][] visited,int N,int M, char c,int bi,int bj, int steps){
	       
	        if(i < 0 || i >= N || j < 0 || j >= M){
	            return false;
	        }
	        
	       	if(graph[i][j] != c){
	            return false;
	        } 
	        
	        if(visited[i][j]){
	            
	        	if(bi == i && bj == j){
	        		if(steps != 0 && steps < 4){
	                	return false;
	            	}else if(steps > 3){
	                	return true;
	            }
	        }else{
	            return false;
	        }
	            
	        }

	        visited[i][j] = true;
	        char current = graph[i][j];
	        boolean result = false;
	        if(c == current){
	            
	            steps++;
	            result = result || findCycle(graph,i-1,j,visited,N,M,c,bi,bj,steps);
	            result = result || findCycle(graph,i,j+1,visited,N,M,c,bi,bj, steps);
	            result = result || findCycle(graph,i+1,j,visited,N,M,c,bi,bj, steps);
	            result = result || findCycle(graph, i, j-1, visited,N,M,c,bi,bj, steps);
	        }else{
	            return false;
	        }
	        visited[i][j] = false;
	        return result;
	    }
	    
	    int solve(String[] Graph , int N, int M) {
	        boolean[][] visited = new boolean[N][M];
	        char[][] g = new char[N][M];
	        for(int i = 0;i < N;i++){
	        	String str = Graph[i];
	            for(int j = 0;j < M;j++){
	                g[i][j] = str.charAt(j);
	            }
	        }
	        for(int i = 0;i < N;i++){
	            for(int j = 0;j < M;j++){
	                    boolean check = findCycle(g, i,j,visited,N,M,g[i][j],i,j,0);
	                    if(check){
	                        return 1;
	                    }
	            }
	        }
			return 0;
			
		}

}
