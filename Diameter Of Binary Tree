// /*
	
// 	Following is the structure used to represent the Binary Tree Node

// 	class BinaryTreeNode<T> {
// 		T data;
// 		BinaryTreeNode<T> left;
// 		BinaryTreeNode<T> right;

// 		public BinaryTreeNode(T data) {
// 			this.data = data;
// 			this.left = null;
// 			this.right = null;
// 		}
// 	}

// */

// public class Solution {

// 	public static int diameterOfBinaryTree(BinaryTreeNode<Integer> root){
// 		//Your code goes here
//        	//Your code goes here
//         if (root==null)
//         {
//             return 0;
//         }
//          int ans=findHeight(root.left)+findHeight(root.right)+1;
//          return ans;
// 	}
    
//     public static int findHeight(BinaryTreeNode<Integer> root)
//     {
//         if (root==null)
//         {
//             return 0;
//         }
//         int leftHeight=findHeight(root.left);
//         int rightHeight=findHeight(root.right);
        
//         if(leftHeight>rightHeight)
//         {
//             return leftHeight+1;
//         }
//         else
//         {
//             return rightHeight+1;
//         } 
// 	}
	
// }




public class Solution {

	public static int diameterOfBinaryTree(BinaryTreeNode<Integer> root){
		//Your code goes here
        if(root==null){
            return 0;
        }
        int left_h = height(root.left);
        int right_h = height(root.right);
        int left_d = diameterOfBinaryTree(root.left);
        int right_d = diameterOfBinaryTree(root.right);
        
        return Math.max(1+left_h+right_h,Math.max(left_d,right_d));
	}
    public static int height(BinaryTreeNode<Integer> root){
		//Your code goes here
        if(root==null){
            return 0;
        }
        int left = height(root.left);
        int right = height(root.right);
        
        return 1+Math.max(left,right);
	}
	
}
