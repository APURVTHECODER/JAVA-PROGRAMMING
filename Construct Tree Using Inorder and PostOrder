/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

public class Solution {

	public static BinaryTreeNode<Integer> buildTree(int[] postOrder, int[] inOrder) {
		//Your code goes here
        return  buildTreehelper(postOrder , inOrder , 0 , postOrder.length-1 , 0, inOrder.length-1);
        
        
	}
    public static BinaryTreeNode<Integer> buildTreehelper(int[] postOrder, int[] inOrder , int sipost , int eipost , int siin , int eiin) {
		
        if(sipost>eipost)
        {
            return null;
        }
        int rootdata=postOrder[eipost];
        BinaryTreeNode<Integer> root=new BinaryTreeNode<Integer>(rootdata);
        int rootindx=-1;
        for(int i=siin;i<=eiin;i++)
        {
            if(rootdata==inOrder[i])
            {
                rootindx=i;
                break;
            }
        }
        
        int siinleft=siin;
        int eiinleft=rootindx-1;
        
        int siinright=rootindx+1;
        int eiinright=eiin;
        
        int sipoleft=sipost;
        int lenlefttree=eiinleft-siinleft+1;
        
       
        
        int eipoleft=sipoleft+(lenlefttree-1);
        int siporight=eipoleft+1;
        int eiporight=eipost-1;
        
        BinaryTreeNode<Integer> leftchildtree=buildTreehelper(postOrder,inOrder,sipoleft,eipoleft,siinleft,eiinleft);
        BinaryTreeNode<Integer> rightchildtree=buildTreehelper(postOrder,inOrder,siporight,eiporight,siinright,eiinright);
        root.left=leftchildtree;
        root.right=rightchildtree;
        return root;
            
	}


}
