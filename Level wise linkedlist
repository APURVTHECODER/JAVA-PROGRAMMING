import java.util.ArrayList;
import java.util.*;

public class Solution {
	/*
	 * BinaryTreeNode class
	 * 
	 * class BinaryTreeNode<T> 
	 * { 
	 * 		T data; 
	 * 		BinaryTreeNode<T> left; 
	 * 		BinaryTreeNode<T> right;
	 *		public BinaryTreeNode(T data) 
	 *		{
	 *  		this.data = data; 
	 *  	} 
	 *  }
	 */
	/*
	 * LinkedListNode Class
	 * class LinkedListNode<T> 
	 * { 
	 * 		T data; 
	 * 		LinkedListNode<T> next;
	 * 		public LinkedListNode(T data) 	
	 * 		{
	 *  		this.data = data; 
	 *  	} 
	 *  }
	 */
	public static ArrayList<LinkedListNode<Integer>> constructLinkedListForEachLevel(BinaryTreeNode<Integer> root){
        if(root==null)
        {
            return null;
        }
	 Queue<BinaryTreeNode<Integer>> q = new LinkedList<BinaryTreeNode<Integer>>();
        LinkedListNode<Integer> head = null,tail=null;
    ArrayList<LinkedListNode<Integer>> arr=new ArrayList<LinkedListNode<Integer>>();
    q.add(root);
    q.add(null);
        while(!q.isEmpty())
        {
            BinaryTreeNode<Integer> curr=q.poll();
            if(curr==null)
            {
                if(q.isEmpty())
                {
                    break;
                }
                else
                {
                	q.add(null);
                    tail.next=null;
                    tail=tail.next;
                    head=null;
                }      
            }      
            else
            {
                if (head==null)
                {
                    head = new LinkedListNode<Integer>(curr.data);
                    tail=head;
                    arr.add(head);
                }
                else
                {
                    tail.next=new LinkedListNode<Integer>(curr.data);
                    tail=tail.next;
                }
            head=new LinkedListNode(curr.data);
             if(curr.left!=null)
            {
                q.add(curr.left);
            }
            if(curr.right!=null)
            {
                q.add(curr.right);
            }
        } 
        }
        return arr;   
	}
}
